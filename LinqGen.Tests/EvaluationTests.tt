// LinqGen.Tests, Maxwell Keonwoo Kang <code.athei@gmail.com>, 2022

<#@template language="C#" #>
<#@ assembly name="System.Core" #>
<#
    var testExpressions = new (string title, string result, string linq, string linqgen)[]
    {
        ("Count", "{0}", "Count()", "Count()"),
        ("CountPred", "{0}", "Count(x => x % 2 == 0)", "Count(x => x % 2 == 0)"),
        ("CountPredStruct", "{0}", "Count(x => x % 2 == 0)", "Count(new {1}EvenPredicate())"),
        ("First", "{0}", "First()", "First()"),
        ("FirstOrDefault", "{0}", "FirstOrDefault()", "FirstOrDefault()"),
        ("Last", "{0}", "Last()", "Last()"),
        ("LastOrDefault", "{0}", "LastOrDefault()", "LastOrDefault()"),
        ("Min", "{0}", "Min()", "Min()"),
        ("MinComp", "{0}", "Min()", "Min(new {1}StructComparer())"),
        ("MinBy", "{0}", "MinBy(x => -x)", "MinBy(x => -x)"),
        ("MinByComp", "{0}", "MinBy(x => -x)", "MinBy(x => -x, Comparer<{0}>.Default)"),
        ("MinByStruct", "{0}", "MinBy(x => -x)", "MinBy(new {1}NegateSelector(), new {1}StructComparer())"),
        ("Max", "{0}", "Max()", "Max()"),
        ("MaxComp", "{0}", "Max()", "Max(new {1}StructComparer())"),
        ("MaxBy", "{0}", "MaxBy(x => -x)", "MaxBy(x => -x)"),
        ("MaxByComp", "{0}", "MaxBy(x => -x)", "MaxBy(x => -x, Comparer<{0}>.Default)"),
        ("MaxByStruct", "{0}", "MaxBy(x => -x)", "MaxBy(new {1}NegateSelector(), new {1}StructComparer())"),
        ("Sum", "{0}", "Sum()", "Sum()"),
        ("SumSelector", "{0}", "Sum(x => x * 2)", "Sum(new {1}DoubleSelector())"),
        ("NotEmpty", "bool", "Any()", "Any()"),
        ("Any", "bool", "Any(x => x % 2 == 0)", "Any(x => x % 2 == 0)"),
        ("AnyStruct", "bool", "Any(x => x % 2 == 0)", "Any(new {1}EvenPredicate())"),
        ("All", "bool", "All(x => x % 2 == 0)", "All(x => x % 2 == 0)"),
        ("AllStruct", "bool", "All(x => x % 2 == 0)", "All(new {1}EvenPredicate())"),
        ("ToArray", "{0}[]", "ToArray()", "ToArray()"),
        ("ToList", "List<{0}>", "ToList()", "ToList()"),
    };

    var testSources = new (string element, string variable, string prefix)[]
    {
        ("int", "IntEmpty", null),
        ("int", "IntArray", null),
        ("int", "IntList", null),
        ("int", "IntEnumerable", null),
        ("int", "IntCollection", null),
        ("int", "IntReadOnlyCollection", null),
        ("ReferenceInt", "ReferenceIntList", "RefInt"),
    };
#>

using System;
using System.Collections.Generic;
using System.Linq;
using NUnit.Framework;
using Cathei.LinqGen;

namespace Cathei.LinqGen.Tests;

<#
    foreach (var expression in testExpressions)
    {
#>
[TestFixture]
public class <#= expression.title #>_Tests
{
<#
        foreach (var source in testSources)
        {
#>

    [Test]
    public void SameAsLinq_<#= source.variable #>()
    {
        Exception ex1 = null, ex2 = null;
        <#= string.Format(expression.result, source.element) #> expected = default, actual = default;

        try
        {
            expected = TestData.<#= source.variable #>
                .<#= expression.linq #>;
        }
        catch (Exception e)
        {
            ex1 = e;
        }

        try
        {
            actual = TestData.<#= source.variable #>
                .Gen()
                .<#= string.Format(expression.linqgen, source.element, source.prefix) #>;

        }
        catch (Exception e)
        {
            ex2 = e;
        }

        Assert.AreEqual(expected, actual);
        Assert.AreEqual(ex1?.GetType(), ex2?.GetType());
    }

    [TestCase(0, 0)]
    [TestCase(5, 0)]
    [TestCase(0, 8)]
    [TestCase(7, 9)]
    public void SliceSameAsLinq_<#= source.variable #>(int skip, int take)
    {
        Exception ex1 = null, ex2 = null;
        <#= string.Format(expression.result, source.element) #> expected = default, actual = default;

        try
        {
            expected = TestData.<#= source.variable #>
                .Skip(skip).Take(take)
                .<#= expression.linq #>;
        }
        catch (Exception e)
        {
            ex1 = e;
        }

        try
        {
            actual = TestData.<#= source.variable #>
                .Gen()
                .Skip(skip).Take(take)
                .<#= string.Format(expression.linqgen, source.element, source.prefix) #>;
        }
        catch (Exception e)
        {
            ex2 = e;
        }

        Assert.AreEqual(expected, actual);
        Assert.AreEqual(ex1?.GetType(), ex2?.GetType());
    }
<#
        }
#>
}
<#
    }
#>
